import os, io, tempfile, logging
from typing import List, Tuple, Dict, Any
from reportlab.lib.pagesizes import LETTER
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib import colors
from reportlab.lib.units import inch


def parse_answer_sections(answer: str) -> Dict[str, Any]:
    """Parse the LLM answer into sections.

    Returns keys: summary_bullets (List[str]), risks (List[List[str]]), response_lines (List[str]).
    - summary_bullets: take first 3 bullet-like lines (starting with '-', '*', or '•')
    - risks: attempt to parse a markdown-like table from the answer; if none, empty list
    - response_lines: lines starting with a number like '1.'
    """
    lines = [l.rstrip() for l in answer.splitlines()]

    # Executive summary: first 3 bullet lines
    summary_bullets: List[str] = []
    for l in lines:
        trimmed = l.strip()
        if trimmed.startswith(('-', '*', '•')) and len(summary_bullets) < 3:
            summary_bullets.append(trimmed.lstrip('-*• ').strip())
        if len(summary_bullets) >= 3:
            break

    # Risk checklist: parse markdown table between any header/sep rows
    risks: List[List[str]] = []
    in_table = False
    for l in lines:
        if '|' in l:
            parts = [c.strip() for c in l.strip().strip('|').split('|')]
            # detect separator row like |---|---|
            if all(set(p) <= set('-: ') and len(p) > 0 for p in parts):
                in_table = True
                continue
            if in_table:
                risks.append(parts)
        else:
            if in_table:
                break

    # Response draft: numbered list lines
    response_lines: List[str] = []
    for l in lines:
        stripped = l.strip()
        if len(stripped) >= 3 and stripped[0].isdigit() and stripped[1] in {'.', ')'}:
            # '1. something' or '1) something'
            response_lines.append(stripped)

    return {
        "summary_bullets": summary_bullets,
        "risks": risks,
        "response_lines": response_lines,
    }


def _build_cover(story, styles):
    story.append(Paragraph("DocPilot — Evidence-Based Report", styles['Title']))
    story.append(Spacer(1, 0.1 * inch))
    story.append(Paragraph("Generated by DocPilot", styles['Normal']))
    story.append(Spacer(1, 0.05 * inch))
    story.append(Paragraph("Evidence-backed analysis and draft response", styles['Italic']))
    story.append(PageBreak())

def _build_summary(story, styles, sections):
    story.append(Paragraph("Section 1: Executive Summary", styles['Heading2']))
    bullets = sections.get('summary_bullets', [])
    if bullets:
        for b in bullets:
            story.append(Paragraph(f"• {b}", styles['Normal']))
    else:
        story.append(Paragraph("No bullet summary detected.", styles['Italic']))
    story.append(Spacer(1, 0.2 * inch))

def _build_response_draft(story, styles, sections):
    story.append(Paragraph("Section 3: Response Draft", styles['Heading2']))
    resp_lines: List[str] = sections.get('response_lines', [])
    if resp_lines:
        for line in resp_lines:
            story.append(Paragraph(line, styles['Normal']))
    else:
        story.append(Paragraph("No numbered response draft detected.", styles['Italic']))
    story.append(Spacer(1, 0.2 * inch))

def _build_evidence_section(story, styles, evidence: List[Dict[str, Any]]):
    story.append(Paragraph("Section 4: Evidence Passages", styles['Heading2']))
    table_rows: List[List[str]] = [["#", "document_id", "page", "ord", "snippet"]]
    for i, ev in enumerate(evidence, start=1):
        doc_id = str(ev.get('document_id') or ev.get('doc_id') or '')
        page = ev.get('page')
        page_str = str(page) if page is not None else "-"
        ord_val = str(ev.get('ord', ''))
        snippet = str(ev.get('snippet') or ev.get('text') or '')
        if len(snippet) > 200:
            snippet = snippet[:200] + '…'
        table_rows.append([str(i), doc_id, page_str, ord_val, snippet])
    table = Table(table_rows, repeatRows=1, hAlign='LEFT', colWidths=[0.4*inch, 2.4*inch, 0.6*inch, 0.6*inch, 3.6*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
    ]))
    story.append(table)

def _build_risk_section_contract(story, styles, sections):
    story.append(Paragraph("Section 2: Contract Risk Checklist", styles['Heading2']))
    headers = ["Item", "Severity", "Evidence #"]
    defaults = [
        ["Liability cap present", "High", ""],
        ["Indemnification clause", "High", ""],
        ["SLA / Uptime specified", "Medium", ""],
        ["Termination terms", "Medium", ""],
        ["Jurisdiction specified", "Low", ""],
    ]
    rows = sections.get('risks', []) or defaults
    table = Table([headers] + rows, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
    ]))
    story.append(table)
    story.append(Spacer(1, 0.2 * inch))

def _build_risk_section_compliance(story, styles, sections):
    story.append(Paragraph("Section 2: Compliance Checklist", styles['Heading2']))
    headers = ["Requirement", "Status", "Evidence #"]
    defaults = [
        ["GDPR Terms present", "Pending", ""],
        ["DPA/Processing Terms", "Pending", ""],
        ["Security Controls", "Pending", ""],
        ["Data Residency/Transfers", "Pending", ""],
    ]
    rows = sections.get('risks', []) or defaults
    table = Table([headers] + rows, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
    ]))
    story.append(table)
    story.append(Spacer(1, 0.2 * inch))

def _build_risk_section_policy(story, styles, sections):
    story.append(Paragraph("Section 2: Policy Q&A", styles['Heading2']))
    headers = ["Question", "Answer", "Evidence #"]
    defaults = [
        ["Is policy current?", "", ""],
        ["Are roles defined?", "", ""],
        ["Is escalation documented?", "", ""],
    ]
    rows = sections.get('risks', []) or defaults
    table = Table([headers] + rows, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
    ]))
    story.append(table)
    story.append(Spacer(1, 0.2 * inch))

def build_pdf(answer: str, evidence: List[Dict[str, Any]], template: str | None = None) -> bytes:
    """Render a PDF with a chosen template; default remains legacy layout."""
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=LETTER, title="DocPilot — Evidence-Based Report")
    styles = getSampleStyleSheet()

    story: List[Any] = []
    _build_cover(story, styles)

    sections = parse_answer_sections(answer)
    _build_summary(story, styles, sections)
    # Template-specific middle section
    t = (template or "").strip().lower()
    if t in ("contract", "contract_risk"):
        _build_risk_section_contract(story, styles, sections)
    elif t in ("compliance", "compliance_checklist"):
        _build_risk_section_compliance(story, styles, sections)
    elif t in ("policy", "policy_qa"):
        _build_risk_section_policy(story, styles, sections)
    else:
        # Legacy risk table
        story.append(Paragraph("Section 2: Risk Checklist", styles['Heading2']))
        risks: List[List[str]] = sections.get('risks', [])
        if risks:
            table_data = risks
            table = Table(table_data, repeatRows=1, hAlign='LEFT')
            table.setStyle(TableStyle([
                ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
                ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
                ('ALIGN', (0,0), (-1,-1), 'LEFT'),
            ]))
            story.append(table)
        else:
            story.append(Paragraph("No risk table detected.", styles['Italic']))
        story.append(Spacer(1, 0.2 * inch))
    _build_response_draft(story, styles, sections)
    _build_evidence_section(story, styles, evidence)

    # Appendix if parsing failed
    if not sections.get('summary_bullets') and not sections.get('response_lines'):
        story.append(Spacer(1, 0.3 * inch))
        story.append(Paragraph("Appendix: Raw Answer", styles['Heading2']))
        story.append(Paragraph(answer.replace('\n', '<br/>'), styles['Normal']))

    doc.build(story)
    return buf.getvalue()

